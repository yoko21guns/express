#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('apply:server');
var http = require('http');
var express = require('express'); 
var app  = express();
var path = 'C:/Users/yiris/git/express/apply'

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// ===== テンプレートの設定 ====================
app.set('views', path + '/views');
app.set('view engine', 'ejs');

/**
 * Middleware.
 */
// ===== リクエスト処理に必要なミドルウェア =====
var bodyParser = require('body-parser');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

// ===== 静的ファイルの読み込み ================
app.use(express.static( path + '/public'));
// app.use(express.static('public'));

// ===== logger ==============================
var logger = require('morgan');
app.use(logger('dev'));



/**
 * Contents.
 */
//画面を表示する
app.get('/', function(req, res) {
  // res.send('Hello from apply!');
  res.render('index', {title:'私のプログラム置き場'});
});
app.get('/make-domain', function(req, res) {
  // res.send('Hello from apply!');
  res.render('make-domain', {title:'Make Domain'});
});
//ファイルを呼び出す
app.get('/test.txt', function(req, res) {
  res.sendfile( path + '/public/test.txt');
});

// ----- (1) Redmineのチケット情報を取得する[成功] -----------------------------
/*
const Redmine = require('node-redmine');

const hostName = 'http://localhost/redmine/projects/webfusen/';  // ローカルのRedmineURL
const config = {
  apiKey: '5b9e1b103e8a9804dd9a37de4aebb45395c049b4'  //takaoki
};
const redmine = new Redmine(hostName, config);

// Issue を5件取得する
redmine.issues({
  // limit: 5
}, (error, data) => {
  if(error) throw error;
  
  // JSON を2スペースで整形して表示する
  data.issues.forEach((issue) => {
    console.log(JSON.stringify(issue, null, '  '));
  });
});
*/
// --------------------------------------------------------------------

// ----- (2) Redmineのチケット情報を取得する[成功] -----------------------------
/*
const Redmine = require('node-redmine');

const hostName = 'http://localhost/redmine/projects/webfusen/';  // ローカルのRedmineURL
const config = {
  apiKey: '5b9e1b103e8a9804dd9a37de4aebb45395c049b4'  //takaoki
};
const redmine = new Redmine(hostName, config);

// Issue を5件取得する
redmine.issues({
  // limit: 1
}, (error, data) => {
  if(error) throw error;
  
  // JSON を2スペースで整形して表示する
  data.issues.forEach((issue) => {
    // console.log("issue="+issue);
    const json = JSON.stringify(issue, null, '  '); // issueをjson形式に変換
    console.log("json="+json+"\n\n");
    
    const obj = JSON.parse(json);                   // jsonをobj形式に変換
    console.log("obj="+obj+"\n\n");                 // この出力の仕方だと[object object]になる
    console.log("obj="+obj.id+"\n\n");              // この出力の仕方だとidが取得できるになる
    console.log("obj2="+obj.custom_fields[0].value+"\n\n");   // この出力の仕方だとカスタムフィールドの値を取得できる

    // [2, 5, 9].forEach(function(element, index, array) {
    //   console.log(index + ":" + element);
    // });
    obj.custom_fields.forEach(function(element, index) {
      console.log(element, index);
    });

  });
});
*/
// --------------------------------------------------------------------

/*
app.get('/getCode.json', function(req, res) {
  const url = "https://192.168.3.10/redmine/projects/webfusen_manage/issues.json?query_id=148&key=8f702c521c7427c29effd1c932eda2a1124219c5";
  // const name = req.body.name;
  app.post(url, function(req, res) {
    const json = req.body.issues;
    console.log(json);
  });

  // console.log("Get Code!!!");
  // console.log(json);
  // res.send(json);
});
*/